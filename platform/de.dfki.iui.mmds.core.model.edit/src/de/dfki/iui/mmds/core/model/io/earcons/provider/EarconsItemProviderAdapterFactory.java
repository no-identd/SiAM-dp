/*******************************************************************************
 * The Creative Commons CC-BY-NC 4.0 License
 * http://creativecommons.org/licenses/by-nc/4.0/legalcode
 *
 * Creative Commons (CC) by DFKI GmbH
 * - Vanessa Hahn <Vanessa.Hahn@dfki.de>
 * - Robert Nesselrath <rnesselrath@gmail.com>
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************/
/**
 */
package de.dfki.iui.mmds.core.model.io.earcons.provider;

import de.dfki.iui.mmds.core.model.io.earcons.util.EarconsAdapterFactory;
import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EarconsItemProviderAdapterFactory extends EarconsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EarconsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.AuditoryIcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuditoryIconItemProvider auditoryIconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.AuditoryIcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuditoryIconAdapter() {
		if (auditoryIconItemProvider == null) {
			auditoryIconItemProvider = new AuditoryIconItemProvider(this);
		}

		return auditoryIconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.Earcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EarconItemProvider earconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.Earcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEarconAdapter() {
		if (earconItemProvider == null) {
			earconItemProvider = new EarconItemProvider(this);
		}

		return earconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.ReferenceEarcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceEarconItemProvider referenceEarconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.ReferenceEarcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceEarconAdapter() {
		if (referenceEarconItemProvider == null) {
			referenceEarconItemProvider = new ReferenceEarconItemProvider(this);
		}

		return referenceEarconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.PlainEarcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainEarconItemProvider plainEarconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.PlainEarcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainEarconAdapter() {
		if (plainEarconItemProvider == null) {
			plainEarconItemProvider = new PlainEarconItemProvider(this);
		}

		return plainEarconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.EarconNote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EarconNoteItemProvider earconNoteItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.EarconNote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEarconNoteAdapter() {
		if (earconNoteItemProvider == null) {
			earconNoteItemProvider = new EarconNoteItemProvider(this);
		}

		return earconNoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.CombinedEarcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CombinedEarconItemProvider combinedEarconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.CombinedEarcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCombinedEarconAdapter() {
		if (combinedEarconItemProvider == null) {
			combinedEarconItemProvider = new CombinedEarconItemProvider(this);
		}

		return combinedEarconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.InheritedEarcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritedEarconItemProvider inheritedEarconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.InheritedEarcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritedEarconAdapter() {
		if (inheritedEarconItemProvider == null) {
			inheritedEarconItemProvider = new InheritedEarconItemProvider(this);
		}

		return inheritedEarconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.InheritedEarconLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritedEarconLayerItemProvider inheritedEarconLayerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.InheritedEarconLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritedEarconLayerAdapter() {
		if (inheritedEarconLayerItemProvider == null) {
			inheritedEarconLayerItemProvider = new InheritedEarconLayerItemProvider(this);
		}

		return inheritedEarconLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.TransformedEarcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformedEarconItemProvider transformedEarconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.TransformedEarcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformedEarconAdapter() {
		if (transformedEarconItemProvider == null) {
			transformedEarconItemProvider = new TransformedEarconItemProvider(this);
		}

		return transformedEarconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.Spearcon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpearconItemProvider spearconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.Spearcon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpearconAdapter() {
		if (spearconItemProvider == null) {
			spearconItemProvider = new SpearconItemProvider(this);
		}

		return spearconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io.earcons.Semanticon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticonItemProvider semanticonItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io.earcons.Semanticon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticonAdapter() {
		if (semanticonItemProvider == null) {
			semanticonItemProvider = new SemanticonItemProvider(this);
		}

		return semanticonItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (auditoryIconItemProvider != null) auditoryIconItemProvider.dispose();
		if (earconItemProvider != null) earconItemProvider.dispose();
		if (referenceEarconItemProvider != null) referenceEarconItemProvider.dispose();
		if (plainEarconItemProvider != null) plainEarconItemProvider.dispose();
		if (earconNoteItemProvider != null) earconNoteItemProvider.dispose();
		if (combinedEarconItemProvider != null) combinedEarconItemProvider.dispose();
		if (inheritedEarconItemProvider != null) inheritedEarconItemProvider.dispose();
		if (inheritedEarconLayerItemProvider != null) inheritedEarconLayerItemProvider.dispose();
		if (transformedEarconItemProvider != null) transformedEarconItemProvider.dispose();
		if (spearconItemProvider != null) spearconItemProvider.dispose();
		if (semanticonItemProvider != null) semanticonItemProvider.dispose();
	}

}
