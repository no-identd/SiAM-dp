/*******************************************************************************
 * The Creative Commons CC-BY-NC 4.0 License
 * http://creativecommons.org/licenses/by-nc/4.0/legalcode
 *
 * Creative Commons (CC) by DFKI GmbH
 * - Vanessa Hahn <Vanessa.Hahn@dfki.de>
 * - Robert Nesselrath <rnesselrath@gmail.com>
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************/
/**
 */
package de.dfki.iui.mmds.core.model.io_interfaces.provider;

import de.dfki.iui.mmds.core.model.io_interfaces.util.Io_interfacesAdapterFactory;
import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Io_interfacesItemProviderAdapterFactory extends Io_interfacesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Io_interfacesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.AcousticEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcousticEventItemProvider acousticEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.AcousticEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcousticEventAdapter() {
		if (acousticEventItemProvider == null) {
			acousticEventItemProvider = new AcousticEventItemProvider(this);
		}

		return acousticEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.HandGesture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HandGestureItemProvider handGestureItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.HandGesture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHandGestureAdapter() {
		if (handGestureItemProvider == null) {
			handGestureItemProvider = new HandGestureItemProvider(this);
		}

		return handGestureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.BodyGesture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BodyGestureItemProvider bodyGestureItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.BodyGesture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBodyGestureAdapter() {
		if (bodyGestureItemProvider == null) {
			bodyGestureItemProvider = new BodyGestureItemProvider(this);
		}

		return bodyGestureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.EyeGaze} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EyeGazeItemProvider eyeGazeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.EyeGaze}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEyeGazeAdapter() {
		if (eyeGazeItemProvider == null) {
			eyeGazeItemProvider = new EyeGazeItemProvider(this);
		}

		return eyeGazeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.HeadGesture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeadGestureItemProvider headGestureItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.HeadGesture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeadGestureAdapter() {
		if (headGestureItemProvider == null) {
			headGestureItemProvider = new HeadGestureItemProvider(this);
		}

		return headGestureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.PointingGesture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointingGestureItemProvider pointingGestureItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.PointingGesture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointingGestureAdapter() {
		if (pointingGestureItemProvider == null) {
			pointingGestureItemProvider = new PointingGestureItemProvider(this);
		}

		return pointingGestureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.Speech} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeechItemProvider speechItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.Speech}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeechAdapter() {
		if (speechItemProvider == null) {
			speechItemProvider = new SpeechItemProvider(this);
		}

		return speechItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.SpeechSynthesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeechSynthesisItemProvider speechSynthesisItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.SpeechSynthesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeechSynthesisAdapter() {
		if (speechSynthesisItemProvider == null) {
			speechSynthesisItemProvider = new SpeechSynthesisItemProvider(this);
		}

		return speechSynthesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.AudioTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioTrackItemProvider audioTrackItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.AudioTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioTrackAdapter() {
		if (audioTrackItemProvider == null) {
			audioTrackItemProvider = new AudioTrackItemProvider(this);
		}

		return audioTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.VirtualCharacter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualCharacterItemProvider virtualCharacterItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.VirtualCharacter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualCharacterAdapter() {
		if (virtualCharacterItemProvider == null) {
			virtualCharacterItemProvider = new VirtualCharacterItemProvider(this);
		}

		return virtualCharacterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.EyeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EyeDataItemProvider eyeDataItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.EyeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEyeDataAdapter() {
		if (eyeDataItemProvider == null) {
			eyeDataItemProvider = new EyeDataItemProvider(this);
		}

		return eyeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.Word} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WordItemProvider wordItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.Word}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWordAdapter() {
		if (wordItemProvider == null) {
			wordItemProvider = new WordItemProvider(this);
		}

		return wordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.Thermometer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThermometerItemProvider thermometerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.Thermometer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThermometerAdapter() {
		if (thermometerItemProvider == null) {
			thermometerItemProvider = new ThermometerItemProvider(this);
		}

		return thermometerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.PulseMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PulseMonitorItemProvider pulseMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.PulseMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPulseMonitorAdapter() {
		if (pulseMonitorItemProvider == null) {
			pulseMonitorItemProvider = new PulseMonitorItemProvider(this);
		}

		return pulseMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.LampControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LampControlItemProvider lampControlItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.LampControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLampControlAdapter() {
		if (lampControlItemProvider == null) {
			lampControlItemProvider = new LampControlItemProvider(this);
		}

		return lampControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.VentilatorControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VentilatorControlItemProvider ventilatorControlItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.VentilatorControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVentilatorControlAdapter() {
		if (ventilatorControlItemProvider == null) {
			ventilatorControlItemProvider = new VentilatorControlItemProvider(this);
		}

		return ventilatorControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.Tangible} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TangibleItemProvider tangibleItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.Tangible}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTangibleAdapter() {
		if (tangibleItemProvider == null) {
			tangibleItemProvider = new TangibleItemProvider(this);
		}

		return tangibleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.io_interfaces.SpeechFeatures} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeechFeaturesItemProvider speechFeaturesItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.io_interfaces.SpeechFeatures}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeechFeaturesAdapter() {
		if (speechFeaturesItemProvider == null) {
			speechFeaturesItemProvider = new SpeechFeaturesItemProvider(this);
		}

		return speechFeaturesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (acousticEventItemProvider != null) acousticEventItemProvider.dispose();
		if (handGestureItemProvider != null) handGestureItemProvider.dispose();
		if (bodyGestureItemProvider != null) bodyGestureItemProvider.dispose();
		if (eyeGazeItemProvider != null) eyeGazeItemProvider.dispose();
		if (headGestureItemProvider != null) headGestureItemProvider.dispose();
		if (pointingGestureItemProvider != null) pointingGestureItemProvider.dispose();
		if (speechItemProvider != null) speechItemProvider.dispose();
		if (speechSynthesisItemProvider != null) speechSynthesisItemProvider.dispose();
		if (audioTrackItemProvider != null) audioTrackItemProvider.dispose();
		if (virtualCharacterItemProvider != null) virtualCharacterItemProvider.dispose();
		if (eyeDataItemProvider != null) eyeDataItemProvider.dispose();
		if (wordItemProvider != null) wordItemProvider.dispose();
		if (thermometerItemProvider != null) thermometerItemProvider.dispose();
		if (pulseMonitorItemProvider != null) pulseMonitorItemProvider.dispose();
		if (lampControlItemProvider != null) lampControlItemProvider.dispose();
		if (ventilatorControlItemProvider != null) ventilatorControlItemProvider.dispose();
		if (tangibleItemProvider != null) tangibleItemProvider.dispose();
		if (speechFeaturesItemProvider != null) speechFeaturesItemProvider.dispose();
	}

}
