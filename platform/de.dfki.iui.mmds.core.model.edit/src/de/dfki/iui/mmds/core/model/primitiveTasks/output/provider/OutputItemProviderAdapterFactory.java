/*******************************************************************************
 * The Creative Commons CC-BY-NC 4.0 License
 * http://creativecommons.org/licenses/by-nc/4.0/legalcode
 *
 * Creative Commons (CC) by DFKI GmbH
 * - Vanessa Hahn <Vanessa.Hahn@dfki.de>
 * - Robert Nesselrath <rnesselrath@gmail.com>
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************/
/**
 */
package de.dfki.iui.mmds.core.model.primitiveTasks.output.provider;

import de.dfki.iui.mmds.core.model.primitiveTasks.output.util.OutputAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OutputItemProviderAdapterFactory extends OutputAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OutputItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.PrimitiveOutputTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveOutputTaskItemProvider primitiveOutputTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.PrimitiveOutputTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveOutputTaskAdapter() {
		if (primitiveOutputTaskItemProvider == null) {
			primitiveOutputTaskItemProvider = new PrimitiveOutputTaskItemProvider(this);
		}

		return primitiveOutputTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.MessageTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageTaskItemProvider messageTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.MessageTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageTaskAdapter() {
		if (messageTaskItemProvider == null) {
			messageTaskItemProvider = new MessageTaskItemProvider(this);
		}

		return messageTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.DocumentPresentationTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentPresentationTaskItemProvider documentPresentationTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.DocumentPresentationTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentPresentationTaskAdapter() {
		if (documentPresentationTaskItemProvider == null) {
			documentPresentationTaskItemProvider = new DocumentPresentationTaskItemProvider(this);
		}

		return documentPresentationTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.CommandSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandSelectionTaskItemProvider commandSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.CommandSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandSelectionTaskAdapter() {
		if (commandSelectionTaskItemProvider == null) {
			commandSelectionTaskItemProvider = new CommandSelectionTaskItemProvider(this);
		}

		return commandSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.MenuItemSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemSelectionTaskItemProvider menuItemSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.MenuItemSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuItemSelectionTaskAdapter() {
		if (menuItemSelectionTaskItemProvider == null) {
			menuItemSelectionTaskItemProvider = new MenuItemSelectionTaskItemProvider(this);
		}

		return menuItemSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ProgressIndicationTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgressIndicationTaskItemProvider progressIndicationTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ProgressIndicationTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgressIndicationTaskAdapter() {
		if (progressIndicationTaskItemProvider == null) {
			progressIndicationTaskItemProvider = new ProgressIndicationTaskItemProvider(this);
		}

		return progressIndicationTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.AdaptationIndicationTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptationIndicationTaskItemProvider adaptationIndicationTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.AdaptationIndicationTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptationIndicationTaskAdapter() {
		if (adaptationIndicationTaskItemProvider == null) {
			adaptationIndicationTaskItemProvider = new AdaptationIndicationTaskItemProvider(this);
		}

		return adaptationIndicationTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ManipulableImageTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManipulableImageTaskItemProvider manipulableImageTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ManipulableImageTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManipulableImageTaskAdapter() {
		if (manipulableImageTaskItemProvider == null) {
			manipulableImageTaskItemProvider = new ManipulableImageTaskItemProvider(this);
		}

		return manipulableImageTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.FreeTextEntryTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FreeTextEntryTaskItemProvider freeTextEntryTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.FreeTextEntryTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFreeTextEntryTaskAdapter() {
		if (freeTextEntryTaskItemProvider == null) {
			freeTextEntryTaskItemProvider = new FreeTextEntryTaskItemProvider(this);
		}

		return freeTextEntryTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.DateTimeEntryTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTimeEntryTaskItemProvider dateTimeEntryTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.DateTimeEntryTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTimeEntryTaskAdapter() {
		if (dateTimeEntryTaskItemProvider == null) {
			dateTimeEntryTaskItemProvider = new DateTimeEntryTaskItemProvider(this);
		}

		return dateTimeEntryTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.IntegerNumberEntryTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerNumberEntryTaskItemProvider integerNumberEntryTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.IntegerNumberEntryTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerNumberEntryTaskAdapter() {
		if (integerNumberEntryTaskItemProvider == null) {
			integerNumberEntryTaskItemProvider = new IntegerNumberEntryTaskItemProvider(this);
		}

		return integerNumberEntryTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.BoundedIntegerNumberEntryTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundedIntegerNumberEntryTaskItemProvider boundedIntegerNumberEntryTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.BoundedIntegerNumberEntryTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundedIntegerNumberEntryTaskAdapter() {
		if (boundedIntegerNumberEntryTaskItemProvider == null) {
			boundedIntegerNumberEntryTaskItemProvider = new BoundedIntegerNumberEntryTaskItemProvider(this);
		}

		return boundedIntegerNumberEntryTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.DecimalNumberEntryTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecimalNumberEntryTaskItemProvider decimalNumberEntryTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.DecimalNumberEntryTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecimalNumberEntryTaskAdapter() {
		if (decimalNumberEntryTaskItemProvider == null) {
			decimalNumberEntryTaskItemProvider = new DecimalNumberEntryTaskItemProvider(this);
		}

		return decimalNumberEntryTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.YesNoSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YesNoSelectionTaskItemProvider yesNoSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.YesNoSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYesNoSelectionTaskAdapter() {
		if (yesNoSelectionTaskItemProvider == null) {
			yesNoSelectionTaskItemProvider = new YesNoSelectionTaskItemProvider(this);
		}

		return yesNoSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.TriStateSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriStateSelectionTaskItemProvider triStateSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.TriStateSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriStateSelectionTaskAdapter() {
		if (triStateSelectionTaskItemProvider == null) {
			triStateSelectionTaskItemProvider = new TriStateSelectionTaskItemProvider(this);
		}

		return triStateSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ListItemSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemSelectionTaskItemProvider listItemSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ListItemSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListItemSelectionTaskAdapter() {
		if (listItemSelectionTaskItemProvider == null) {
			listItemSelectionTaskItemProvider = new ListItemSelectionTaskItemProvider(this);
		}

		return listItemSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.LongListItemSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongListItemSelectionTaskItemProvider longListItemSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.LongListItemSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongListItemSelectionTaskAdapter() {
		if (longListItemSelectionTaskItemProvider == null) {
			longListItemSelectionTaskItemProvider = new LongListItemSelectionTaskItemProvider(this);
		}

		return longListItemSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ShortItemSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShortItemSelectionTaskItemProvider shortItemSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ShortItemSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShortItemSelectionTaskAdapter() {
		if (shortItemSelectionTaskItemProvider == null) {
			shortItemSelectionTaskItemProvider = new ShortItemSelectionTaskItemProvider(this);
		}

		return shortItemSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ListItemMultiSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemMultiSelectionTaskItemProvider listItemMultiSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ListItemMultiSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListItemMultiSelectionTaskAdapter() {
		if (listItemMultiSelectionTaskItemProvider == null) {
			listItemMultiSelectionTaskItemProvider = new ListItemMultiSelectionTaskItemProvider(this);
		}

		return listItemMultiSelectionTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.MessageDismissalTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageDismissalTaskItemProvider messageDismissalTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.MessageDismissalTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageDismissalTaskAdapter() {
		if (messageDismissalTaskItemProvider == null) {
			messageDismissalTaskItemProvider = new MessageDismissalTaskItemProvider(this);
		}

		return messageDismissalTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ObjectSelectionTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSelectionTaskItemProvider objectSelectionTaskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.primitiveTasks.output.ObjectSelectionTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSelectionTaskAdapter() {
		if (objectSelectionTaskItemProvider == null) {
			objectSelectionTaskItemProvider = new ObjectSelectionTaskItemProvider(this);
		}

		return objectSelectionTaskItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (primitiveOutputTaskItemProvider != null) primitiveOutputTaskItemProvider.dispose();
		if (messageTaskItemProvider != null) messageTaskItemProvider.dispose();
		if (documentPresentationTaskItemProvider != null) documentPresentationTaskItemProvider.dispose();
		if (commandSelectionTaskItemProvider != null) commandSelectionTaskItemProvider.dispose();
		if (menuItemSelectionTaskItemProvider != null) menuItemSelectionTaskItemProvider.dispose();
		if (progressIndicationTaskItemProvider != null) progressIndicationTaskItemProvider.dispose();
		if (adaptationIndicationTaskItemProvider != null) adaptationIndicationTaskItemProvider.dispose();
		if (manipulableImageTaskItemProvider != null) manipulableImageTaskItemProvider.dispose();
		if (freeTextEntryTaskItemProvider != null) freeTextEntryTaskItemProvider.dispose();
		if (dateTimeEntryTaskItemProvider != null) dateTimeEntryTaskItemProvider.dispose();
		if (integerNumberEntryTaskItemProvider != null) integerNumberEntryTaskItemProvider.dispose();
		if (boundedIntegerNumberEntryTaskItemProvider != null) boundedIntegerNumberEntryTaskItemProvider.dispose();
		if (decimalNumberEntryTaskItemProvider != null) decimalNumberEntryTaskItemProvider.dispose();
		if (yesNoSelectionTaskItemProvider != null) yesNoSelectionTaskItemProvider.dispose();
		if (triStateSelectionTaskItemProvider != null) triStateSelectionTaskItemProvider.dispose();
		if (listItemSelectionTaskItemProvider != null) listItemSelectionTaskItemProvider.dispose();
		if (longListItemSelectionTaskItemProvider != null) longListItemSelectionTaskItemProvider.dispose();
		if (shortItemSelectionTaskItemProvider != null) shortItemSelectionTaskItemProvider.dispose();
		if (listItemMultiSelectionTaskItemProvider != null) listItemMultiSelectionTaskItemProvider.dispose();
		if (messageDismissalTaskItemProvider != null) messageDismissalTaskItemProvider.dispose();
		if (objectSelectionTaskItemProvider != null) objectSelectionTaskItemProvider.dispose();
	}

}
