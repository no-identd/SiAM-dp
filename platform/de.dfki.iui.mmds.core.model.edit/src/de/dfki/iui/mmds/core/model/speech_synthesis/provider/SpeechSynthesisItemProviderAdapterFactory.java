/*******************************************************************************
 * The Creative Commons CC-BY-NC 4.0 License
 * http://creativecommons.org/licenses/by-nc/4.0/legalcode
 *
 * Creative Commons (CC) by DFKI GmbH
 * - Vanessa Hahn <Vanessa.Hahn@dfki.de>
 * - Robert Nesselrath <rnesselrath@gmail.com>
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************/
/**
 */
package de.dfki.iui.mmds.core.model.speech_synthesis.provider;

import de.dfki.iui.mmds.core.model.speech_synthesis.util.SpeechSynthesisAdapterFactory;
import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpeechSynthesisItemProviderAdapterFactory extends SpeechSynthesisAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpeechSynthesisItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.SSMLSpeechSynthesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSMLSpeechSynthesisItemProvider ssmlSpeechSynthesisItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.SSMLSpeechSynthesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSMLSpeechSynthesisAdapter() {
		if (ssmlSpeechSynthesisItemProvider == null) {
			ssmlSpeechSynthesisItemProvider = new SSMLSpeechSynthesisItemProvider(this);
		}

		return ssmlSpeechSynthesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Audio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioItemProvider audioItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Audio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioAdapter() {
		if (audioItemProvider == null) {
			audioItemProvider = new AudioItemProvider(this);
		}

		return audioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Break} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreakItemProvider breakItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Break}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreakAdapter() {
		if (breakItemProvider == null) {
			breakItemProvider = new BreakItemProvider(this);
		}

		return breakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Desc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescItemProvider descItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Desc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescAdapter() {
		if (descItemProvider == null) {
			descItemProvider = new DescItemProvider(this);
		}

		return descItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.SSML} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSMLItemProvider ssmlItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.SSML}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSMLAdapter() {
		if (ssmlItemProvider == null) {
			ssmlItemProvider = new SSMLItemProvider(this);
		}

		return ssmlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Emphasis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmphasisItemProvider emphasisItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Emphasis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmphasisAdapter() {
		if (emphasisItemProvider == null) {
			emphasisItemProvider = new EmphasisItemProvider(this);
		}

		return emphasisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.LangType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LangTypeItemProvider langTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.LangType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLangTypeAdapter() {
		if (langTypeItemProvider == null) {
			langTypeItemProvider = new LangTypeItemProvider(this);
		}

		return langTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.LookupType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LookupTypeItemProvider lookupTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.LookupType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLookupTypeAdapter() {
		if (lookupTypeItemProvider == null) {
			lookupTypeItemProvider = new LookupTypeItemProvider(this);
		}

		return lookupTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Mark} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkItemProvider markItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Mark}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkAdapter() {
		if (markItemProvider == null) {
			markItemProvider = new MarkItemProvider(this);
		}

		return markItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Mark1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Mark1ItemProvider mark1ItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Mark1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMark1Adapter() {
		if (mark1ItemProvider == null) {
			mark1ItemProvider = new Mark1ItemProvider(this);
		}

		return mark1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Paragraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParagraphItemProvider paragraphItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Paragraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParagraphAdapter() {
		if (paragraphItemProvider == null) {
			paragraphItemProvider = new ParagraphItemProvider(this);
		}

		return paragraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Phoneme} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhonemeItemProvider phonemeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Phoneme}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhonemeAdapter() {
		if (phonemeItemProvider == null) {
			phonemeItemProvider = new PhonemeItemProvider(this);
		}

		return phonemeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Prosody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProsodyItemProvider prosodyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Prosody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProsodyAdapter() {
		if (prosodyItemProvider == null) {
			prosodyItemProvider = new ProsodyItemProvider(this);
		}

		return prosodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.SayAs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SayAsItemProvider sayAsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.SayAs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSayAsAdapter() {
		if (sayAsItemProvider == null) {
			sayAsItemProvider = new SayAsItemProvider(this);
		}

		return sayAsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Sentence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SentenceItemProvider sentenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Sentence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSentenceAdapter() {
		if (sentenceItemProvider == null) {
			sentenceItemProvider = new SentenceItemProvider(this);
		}

		return sentenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Speak} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeakItemProvider speakItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Speak}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeakAdapter() {
		if (speakItemProvider == null) {
			speakItemProvider = new SpeakItemProvider(this);
		}

		return speakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.SsmlLexicon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SsmlLexiconItemProvider ssmlLexiconItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.SsmlLexicon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSsmlLexiconAdapter() {
		if (ssmlLexiconItemProvider == null) {
			ssmlLexiconItemProvider = new SsmlLexiconItemProvider(this);
		}

		return ssmlLexiconItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.SsmlMeta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SsmlMetaItemProvider ssmlMetaItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.SsmlMeta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSsmlMetaAdapter() {
		if (ssmlMetaItemProvider == null) {
			ssmlMetaItemProvider = new SsmlMetaItemProvider(this);
		}

		return ssmlMetaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.SsmlMetadata} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SsmlMetadataItemProvider ssmlMetadataItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.SsmlMetadata}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSsmlMetadataAdapter() {
		if (ssmlMetadataItemProvider == null) {
			ssmlMetadataItemProvider = new SsmlMetadataItemProvider(this);
		}

		return ssmlMetadataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Sub} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubItemProvider subItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Sub}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubAdapter() {
		if (subItemProvider == null) {
			subItemProvider = new SubItemProvider(this);
		}

		return subItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.TokenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenTypeItemProvider tokenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.TokenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenTypeAdapter() {
		if (tokenTypeItemProvider == null) {
			tokenTypeItemProvider = new TokenTypeItemProvider(this);
		}

		return tokenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.iui.mmds.core.model.speech_synthesis.Voice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoiceItemProvider voiceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.iui.mmds.core.model.speech_synthesis.Voice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoiceAdapter() {
		if (voiceItemProvider == null) {
			voiceItemProvider = new VoiceItemProvider(this);
		}

		return voiceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ssmlSpeechSynthesisItemProvider != null) ssmlSpeechSynthesisItemProvider.dispose();
		if (audioItemProvider != null) audioItemProvider.dispose();
		if (breakItemProvider != null) breakItemProvider.dispose();
		if (descItemProvider != null) descItemProvider.dispose();
		if (ssmlItemProvider != null) ssmlItemProvider.dispose();
		if (emphasisItemProvider != null) emphasisItemProvider.dispose();
		if (langTypeItemProvider != null) langTypeItemProvider.dispose();
		if (lookupTypeItemProvider != null) lookupTypeItemProvider.dispose();
		if (markItemProvider != null) markItemProvider.dispose();
		if (mark1ItemProvider != null) mark1ItemProvider.dispose();
		if (paragraphItemProvider != null) paragraphItemProvider.dispose();
		if (phonemeItemProvider != null) phonemeItemProvider.dispose();
		if (prosodyItemProvider != null) prosodyItemProvider.dispose();
		if (sayAsItemProvider != null) sayAsItemProvider.dispose();
		if (sentenceItemProvider != null) sentenceItemProvider.dispose();
		if (speakItemProvider != null) speakItemProvider.dispose();
		if (ssmlLexiconItemProvider != null) ssmlLexiconItemProvider.dispose();
		if (ssmlMetaItemProvider != null) ssmlMetaItemProvider.dispose();
		if (ssmlMetadataItemProvider != null) ssmlMetadataItemProvider.dispose();
		if (subItemProvider != null) subItemProvider.dispose();
		if (tokenTypeItemProvider != null) tokenTypeItemProvider.dispose();
		if (voiceItemProvider != null) voiceItemProvider.dispose();
	}

}
